generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("roles")
}

model Sex {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("sexes")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  services Service[]

  @@map("categories")
}

model User {
  id           String        @id @default(cuid())
  cuid         String        @unique
  name         String
  email        String        @unique
  password     String
  role_id      String
  sex_id       String
  image        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  phone        String?
  Account      Account[]
  Session      Session[]
  appointments Appointment[]
  role         Role          @relation(fields: [role_id], references: [id])
  sex          Sex           @relation(fields: [sex_id], references: [id])

  @@map("users")
}

model Service {
  id                  String               @id @default(cuid())
  cuid                String               @unique
  name                String
  description         String
  detailedDescription String
  price               Float
  duration            Int
  benefits            String[]
  preparation         String[]
  category_id         String
  isActive            Boolean
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  images              ServiceFile[]
  appointments        AppointmentService[]
  category            Category             @relation(fields: [category_id], references: [id])

  @@map("services")
}

model WorkingHours {
  id         String      @id @default(cuid())
  dayOfWeek  Int         @unique
  startTime  String
  endTime    String
  isActive   Boolean     @default(true)
  breakTimes BreakTime[]

  @@map("working_hours")
}

model BreakTime {
  id               String       @id @default(cuid())
  working_hours_id String
  startTime        String
  endTime          String
  reason           String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  workingHours     WorkingHours @relation(fields: [working_hours_id], references: [id], onDelete: Cascade)

  @@map("break_times")
}

model Appointment {
  id          String               @id @default(cuid())
  cuid        String               @unique
  date        DateTime
  endDate     DateTime
  user_id     String
  duration    Int
  total_price Float
  note        String?  
  status      AppointmentStatus    @default(CONFIRMED)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  services    AppointmentService[]
  user        User                 @relation(fields: [user_id], references: [id])

  @@index([date])
  @@index([user_id])
  @@index([status])
  @@map("appointments")
}

model AppointmentService {
  id             String      @id @default(cuid())
  appointment_id String
  service_id     String
  quantity       Int         @default(1)
  appointment    Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  service        Service     @relation(fields: [service_id], references: [id])

  @@unique([appointment_id, service_id])
  @@map("appointment_services")
}


model BusinessConfig {
  id              String           @id @default(cuid())
  minBookingNotice Int              @default(24) // en horas
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("business_config")
}

model DayAvailability {
  id              String           @id @default(cuid())
  dayOfWeek       Int              @unique // 0-6 (Domingo-Sábado)
  available       Boolean          @default(false)
  morningStart    String?          // Formato "HH:MM"
  morningEnd      String?
  afternoonStart  String?
  afternoonEnd    String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("day_availability")
}

model SpecialDate {
  id              String           @id @default(cuid())
  date            DateTime         @unique // Fecha específica
  available       Boolean          @default(false)
  morningStart    String?          // Formato "HH:MM"
  morningEnd      String?
  afternoonStart  String?
  afternoonEnd    String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("special_dates")
}

model ServiceFile {
  id        String   @id @default(uuid())
  name      String
  path      String   @unique
  url       String
  size      Int
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])

  @@index([serviceId])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
